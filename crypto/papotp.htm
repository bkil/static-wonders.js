<!DOCTYPE html>
<html lang=en>
<head>
  <meta charset=utf-8>
  <title>Paper printable graphical one-time pad encryption</title>
  <link rel='shortcut icon' type=image/x-icon href=data:image/x-icon;,>
  <meta property='og:description' content='Example interactive JavaScript0 app for GemiWeb0' name='description'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=no-referrer>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta http-equiv="Content-Security-Policy" content="default-src 'none'; font-src data: blob:; frame-src data: blob:; img-src data: blob:; manifest-src data: blob:; media-src data: blob:; style-src data: blob: 'unsafe-inline' 'unsafe-eval'; script-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
<style>
html, textarea {
  background-color: black;
  color: white;
}

html {
  overflow-wrap: anywhere;
}

pre {
  background-color: #111;
  border: 1px solid;
  margin-left: 0.5em;
}
</style>
</head>
<body><form name=f action='javascript:showCiphered()'
><textarea role=img rows=12 cols=24 name=t
>@@       @@@@    @@
@@      @@@@@@   @@
@@      @@  @@   @@
@@      @@  @@   @@
@@      @@  @@   @@
@@@@@   @@@@@@   @@@@@
@@@@@    @@@@    @@@@@</textarea
><script>
'use strict';
var tmp = new Object;

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i);
  }
  return s;
}

function writeHtml(text) {
  if (tmp.docClosed) {
    var typ = 'html';
    if (document.doctype && document.doctype.name) {
      typ = document.doctype.name;
    }

    var before = '';
    if (document.documentElement && document.documentElement.innerHTML) {
      before = removeAfter(document.documentElement.innerHTML, '<body>');
    }
    document.write('<!DOCTYPE ' + typ + '><html lang=en>' + before + '<body>' + text + '<' + '/body></html>');
    document.close();
  } else {
    document.write(text);
  }
  if (window.f && (window.f.t && window.f.t.focus)) {
    window.f.t.focus();
  }
}

// JS1
function getRandom(n) {
  var x = tmp.random;
  x = x ^ (x >> 7);
  x = x ^ (x << 9);
  return (tmp.random = (x ^ (x >> 13)) & 65535) % n;
}

var nl = String.fromCharCode(10);

function showCiphered() {
  var raw = '';
  if (window.f && window.f.t && window.f.t.value) {
    raw = window.f.t.value;
  }
  var def = '';

  var u = '';
  var v = '';
  var z = '';

  var x0 = tmp.cell + ' ';
  var x1 = ' ' + tmp.cell;
  var x2 = tmp.cell + tmp.cell;
  var i = 0;
  var r = 0;
  var c = 0;
  var bit;
  var n;
  var columns = tmp.columns;
  var rows = tmp.rows;
  while ((raw.length > i) && (rows > r)) {
    n = raw.charCodeAt(i);
    i = i + 1;

    if ((n - 10) && (columns > c)) {
      if (bit = getRandom(2)) {
        u = u + x1;
        if (!(n - 32)) {
          z = z + x1;
        }
      } else {
        u = u + x0;
        if (!(n - 32)) {
          z = z + x0;
        }
      }
      if (bit ^ !(n - 32)) {
        v = v + x0;
      } else {
        v = v + x1;
      }
      if (n - 32) {
        z = z + x2;
        def = def + '@';
      } else {
        def = def + ' ';
      }
      c = c + 1;
    }

    if (!(n - 10) || (i >= raw.length)) {
      while (columns > c) {
        if (getRandom(2)) {
          u = u + x1;
          v = v + x1;
          z = z + x1;
        } else {
          u = u + x0;
          v = v + x0;
          z = z + x0;
        }
        def = def + ' ';
        c = c + 1;
      }
      r = r + 1;
      c = 0;
      if ((raw.length > i) && (rows > r)) {
        u = u + nl;
        v = v + nl;
        z = z + nl;
        def = def + nl;
      }
    }
  }

  var h = '';
  if (tmp.docClosed) {
    h = h + '<form name=f action="javascript:showCiphered()"><textarea role=img rows=12 cols=24 name=t>' +
      def +
      '</textarea>';
  }

  h = h + '<input type=submit>';
  if (tmp.docClosed) {
    h = h + '</form>';
  }
  h = h + '<p><pre role=img>' +
    u +
    '</pre><p><pre role=img>' +
    v +
    '</pre><p><pre role=img>' +
    z +
    '</pre>';
  writeHtml(h);
}

function init() {
  var d = new Date;
  tmp.random = d % 65536;
  if (!tmp.random) {
    tmp.random = 1;
  }
  tmp.rows = 12;
  tmp.columns = 24;
  tmp.cell = '█'; // '\u2588'
  showCiphered();
  tmp.docClosed = 1;
}

init();
</script
></form><h2
>Usage</h2
>Please draw an ASCII-art message to "encrypt". The output shall be two separate graphics that you can print on separate pieces of paper. You may improve your print by using gray text or substituting the "░" character. The third output is to simulate how it would look if you overlapped the first two on paper. The secret message will appear once you place one on top of another and align them in front of a light source such as a window. It may contain up to 24 columns in 12 rows of either space or non-space (e.g., "@").<p
>The canvas could be filled with text generated from a raster font. The font you use should ideally be scaled 2x or 3x and should optimize for contrast by distancing lines from each other and leaving as large blocks of empty areas as possible. The resolution of the dots may be increased to about 75 dots per inch while still maintaining easy alignment of the two sheets of paper by hand. This could be achieved by decreasing the font size or by generating Braille dots. This version is only for illustrative purposes similar to decoder rings: it is generated with a 16-bit PRNG from less than 16 bits of entropy of the current time in milliseconds. Imagine that the random one-time-pad was generated with a secure source of randomness or at least a cryptographically secure pseudorandom number generator.<p
><h2
>Requirements</h2
>You can install a web browser that supports at least JavaScript 1.0 (1995) to use this tool or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:<p
><a target=_blank href=https://bkil.gitlab.io/gemiweb0
>https://bkil.gitlab.io/gemiweb0</a
></body></html>
