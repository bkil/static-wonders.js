<!DOCTYPE html>
<html lang=en>
<head>
  <meta charset=utf-8>
  <title>Playing card shuffle goodness</title>
  <link rel='shortcut icon' type=image/x-icon href=data:image/x-icon;,>
  <meta property='og:description' content='Monte Carlo simulations for comparing the efficiency of algorithms that may be executed manually without electronics for shuffling a deck of playing cards and for determining how well a shuffle was executed using JavaScript0 on GemiWeb0' name='description'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=no-referrer>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
  <style>
textarea {
  display: block;
  min-height: 5em;
  height: 9em;
  width: 100%;
  min-width: 100%;
  max-width: 100%;
}
input {
  margin-right: 1em;
}
  </style>
<!-- -->
  <meta http-equiv='Content-Security-Policy' content="default-src 'none'; img-src data:; style-src 'unsafe-inline'; script-src 'unsafe-inline' 'unsafe-eval'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body>
<h2>Explanation</h2>
Monte Carlo simulations for comparing the efficiency of algorithms that may be executed manually without electronics for shuffling a deck of playing cards and for determining how well a shuffle was executed. The starting vector contains the ascending sequence numbered 1..52.
<p>
Please see the source code of each algorithm in the following text box for implementation details of each metric and shuffle algorithm. You can modify any argument or constant to see its effect after pressing the `Run` button. You can pick a deterministic random seed (`o.seed`), change the number of cards in a deck (`o.cards`), adjust the dimensions of a chart (`o.columns` and `o.bins`) or increase `o.samples` to trade off variance for speed. References:
<ul>
<li><a target=_blank href="https://en.wikipedia.org/wiki/Shuffle#Research">en.wikipedia.org/wiki/Shuffle#Research</a></li>
<li><a target=_blank href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm">en.wikipedia.org/wiki/Fisher-Yates_shuffle#The_modern_algorithm</a></li>
<li><a target=_blank href="https://en.wikipedia.org/wiki/Inversion_(discrete_mathematics)">en.wikipedia.org/wiki/Inversion_(discrete_mathematics)</a></li>
<li><a target=_blank href="https://en.wikipedia.org/wiki/Cycles_and_fixed_points">en.wikipedia.org/wiki/Cycles_and_fixed_points</a></li>
<li><a target=_blank href="https://www.stat.berkeley.edu/~aldous/157/Papers/bayer_diaconis.pdf">Dave Bayer and Persi Diaconis. Trailing the dovetail shuffle to its lair. The Annals of Applied Probability, 2(2):294–313, 1992.</a></li>
</ul>
<h2>Shuffling algorithms</h2>
Creates a random permutation by altering the order of elements within the sequence:
<ul>
<li>Fisher-Yates: well known and proven to produce an unbiased permutation on computers by optionally swapping each element by a random remaining element.</li>
<li>Riffle pair swap: mimics the popular two-hand leafing motion. Splits the deck in half, interleaves the halves and randomly decide whether to swap each aligned pair or not.</li>
<li>Riffle pick: a different model of the same motion. Splits the deck in half, and then picks randomly which half to take the next element from.</li>
<li>Gilbert-Shannon-Reeds riffle: an unbiased version that applies a binomial split to the deck and makes each pick in proportion to the number of cards remaining in each deck.</li>
<li>Inverse riffle: assign each card to one of two decks based on a coin flip and concatenate the decks.</li>
<li>Overhand: mimics the common hand motion of reversing small packets of random size by moving them from the top of the old deck to the top of the new deck.</li>
<li>Coin split: assign each card to either the earlier or the later deck by a random coin flip. Shuffle each deck by the same algorithm. Concatenate the earlier deck with the later deck.</li>
<li>Dice book: place each card inside a book in one of 36 slots decided by two dice throws. For example, after the page numbered twice the two throws concatenated: 22..132. Then go through each page in sequence and add each card to the output which was alone on their page. Collect all remaining cards to a separate deck and shuffle by the same algorithm.</li>
<li>Wandering dice: arrange all cards in a pseudo-grid. Hold onto the first one. Throw the dice twice and use them as coordinates towards the right and below (modulo) of the empty place to pick a card to place into the empty place from. Repeat as many times as required, preferably at least twice the number of cards. Finally place the card you hold to the empty place.</li>
</ul>
<h2>Metrics</h2>
Each metric estimates on a different scale how much the vector is different from the ascending sequence:
<ul>
<li>Rising: the number of rising subsequences within the sequence, each is a maximal disjoint subset whose elements are in sequence.</li>
<li>Neighbor swap: the number of neighboring elements which are out of order.</li>
<li>Neighbor offset: the average of modulo offset that is added to an element and its neighbor (or second neighbor, respectively).</li>
<li>Neighbors near: the number of elements for which 1 or 2 needs to be added (or subtracted) to arrive at its neighbor</li>
<li>Orbital cycles: the number of distinct cycles that result from determining the fixed point at each element. The value of an element will determine the index to look up next in an orbit until a loop is found.</li>
<li>Distance: the average of the distance from the location of a value to its location in the ascending sequence.</li>
<li>Offset: the average of the modulo offset to add to the original location of a value in the ascending sequence to arrive at its present location.</li>
<li>Inversion: the inversion number of the permutation (the number of pairs of elements which are out of order to each other) divided by the number of elements.</li>
<li>McGrath guess next: the number of correct guesses of the next card to be the first of the longest consecutive sequence in the remaining cards.</li>
</ul>
<h2
>Requirements</h2
>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:<p
><a target=_blank href=https://bkil.gitlab.io/gemiweb0
>bkil.gitlab.io/gemiweb0</a
><script>
'use strict';
var st = new Object;

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(text) {
  if (st.docClosed) {
    var h = '';
    if (document.documentElement && document.documentElement.innerHTML) {
      h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
      h = h + '</head>';
    }
    h = '<!DOCTYPE html><html lang=en>' + h + '<body>' + text + '<' + '/body><' + '/html>';
    document.write(h);
    document.close();
  } else {
    document.write(text);
  }
}

function escapeHtmChar(c) {
  var n = c.charCodeAt(0);
  if (!(n - 34)) {
    return '&' + 'quot;';
  } else if (!(n - 38)) {
    return '&' + 'amp;';
  } else if (!(n - 39)) {
    return '&' + 'apos;';
  } else if (!(n - 60)) {
    return '&' + 'lt;';
  } else if (!(n - 62)) {
    return '&' + 'gt;';
  } else {
    return c;
  }
}

function escapeHtm(s) {
  var o = '';
  var c;
  var i = -1;
  while (s.length > (i = i + 1)) {
    c = escapeHtmChar(s.charAt(i));
    o = o + c;
  }
  return o;
}

function replaceNl(s) {
  var o = '';
  var c;
  var i = -1;
  while (s.length > (i = i + 1)) {
    if (s.charCodeAt(i) - 10) {
      c = s.charAt(i);
      o = o + c;
    } else {
      o = o + '<br>';
    }
  }
  return o;
}

// JS1
// PRBS31
// https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence
function getRandomBits(n) {
  var x = st.random;
  var i = n + 1;
  while (i = i - 1) {
    x = (((x >> 30) ^ (x >> 27)) & 1) ^ ((x & 1073741823) << 1);
  }
  st.random = x;
  if (n > 31) {
    n = 31;
  }
  return x & ((1 << n) - 1);
}

// Lemire, Daniel (23 February 2019). "Fast Random Integer Generation in an Interval". ACM Transactions on Modeling and Computer Simulation. 29 (1): 1–12. arXiv:1805.10941. doi:10.1145/3230636. S2CID 44061046.
function getRandom2(s, L) {
  var t;
  var p2L = 1 << L;
  var p2L1 = p2L - 1;
  var m = getRandomBits(L) * s;
  if (s > (m & p2L1)) {
    t = (p2L - s) % s;
    while (t > ((m = getRandomBits(L) * s) & p2L1)) {
    }
  }
  return m >> L;
}

function getRandom(s) {
  return getRandom2(s, 8);
}

function getSequence(o) {
  var n = o.cards;
  var v = new Array;
  var i = -1;
  while (n > (i = i + 1)) {
    v[i] = i + 1;
  }
  return v;
}

function swap(v, i, j) {
  var x = v[i];
  v[i] = v[j];
  v[j] = x;
}

function printArray(o, v) {
  var n = v.length;
  if (n) {
    o.h = o.h + v[0];
  }
  var i = 0;
  while (n > (i = i + 1)) {
    o.h = o.h + ' ' + v[i];
  }
}

function printMetrics(o, v) {
  printArray(o, v);
  var metrics = o.metrics;
  var metric;
  var s = '';
  var i;
  for (i in metrics) {
    if (s) {
      s = s + ', ';
    }
    metric = metrics[i];
    if (o.seed) {
      st.random = o.seed;
    }
    s = s + metric(v) + ' ' + i;
  }
  o.h = o.h + '<br>' + s;
}

function testMetrics(o, title, v) {
  o.h = o.h + '<h2>' + title + '</h2>';
  printMetrics(o, v);
}

function drawHistogram(o, v) {
  var mn = -1;
  var mx = -1;
  var x;
  var n = v.length;
  var i = -1;
  while (n > (i = i + 1)) {
    x = v[i];
    if (x > mx) {
      mx = x;
    }
    if ((0 > mn) || (mn > x)) {
      mn = x;
    }
  }

  var bins = o.bins;
  var col = o.columns;

  var range = (mx - mn) + 1;
  var div = 1;
  if (bins >= range) {
    bins = range;
  } else {
    div = (((range + bins) - 1) / bins) | 0;
    bins = (((range + div) - 1) / div) | 0;
  }
  var lastMod = range % div;
  if (!lastMod) {
    lastMod = div;
  }

  var hist = new Array;
  var vmx = -1;
  var j;
  i = -1;
  while (n > (i = i + 1)) {
    j = ((v[i] - mn) / div) | 0;
    hist[j] = x = (hist[j] || 0) + 1;
    if (j >= (bins - 1)) {
      x = ((x * div) / lastMod) | 0;
    }
    if (x > vmx) {
      vmx = x;
    }
  }

  var mark = mn;
  var nmark = '';
  o.h = o.h + '<ul>';
  i = -1;
  while (bins > (i = i + 1)) {
    j = x = hist[i] || 0;
    if (div > 1) {
      if (i >= (bins - 1)) {
        j = ((x * div) / lastMod) | 0;
        nmark = mx;
      } else {
        nmark = (mark + div) - 1;
      }
      nmark = '..' + nmark;
    }
    j = (((j * col) / vmx) | 0) + 1;
    o.h = o.h + '<li>' + mark + nmark + ': ';
    mark = mark + div;
    if (j > 1) {
      while (j = j - 1) {
        o.h = o.h + '.';
      }
      o.h = o.h + ' ';
    }
    o.h = o.h + x + '</li>';
  }
  o.h = o.h + '</ul>';
}

function testShuffler(o, title, f) {
  o.h = o.h + '<h2>' + title + '</h2>';
  var metrics = o.metrics;
  var metric;
  var sample = new Object;
  var v;
  var w;
  var j;
  var i = -1;
  var rand = o.seed;
  while (o.samples > (i = i + 1)) {
    if (rand) {
      st.random = rand;
    }
    f(v = getSequence(o));
    rand = st.random;

    if (!i) {
      printMetrics(o, v);
    }

    for (j in metrics) {
      w = sample[j];
      if (!w) {
        w = new Array;
        sample[j] = w
      }
      metric = metrics[j];
      if (o.seed) {
        st.random = o.seed;
      }
      w[i] = metric(v);
    }
  }

  for (i in sample) {
    o.h = o.h + '<h3>' + i + '</h3>';
    drawHistogram(o, sample[i]);
  }
}

function printErr(e, err) {
  if (!e.length && e.stack) {
    e = '' + e.stack;
  } else {
    e = '' + e;
  }
  e = replaceNl(escapeHtm(e));
  err.h = err.h + '<h2>Exception</h2>' + e;
}

function tryEval(t, err) {
  try {
    return eval(t);
  } catch (e) {
    printErr(e, err);
  }
}

function run() {
  var o = new Object;
  o.h = '';
  var t = window.f.t.value;
  if (st.docClosed) {
    o.h = o.h + '<form name=f action=javascript:run()><textarea name=t>' + escapeHtm(t) + '</' + 'textarea><input type=submit value=Run>Shuffle and metrics scripts<' + '/form>';
  }
  var err = new Object;
  err.h = '';
  var p = tryEval(t, err);
  o.h = o.h + err.h;
  try {
    if (p && (p.cards > 3) && (53 > p.cards) &&
      (p.bins > 1) && (53 >= p.bins) &&
      (p.columns > 1) && (129 > p.columns) &&
      (p.samples > 0) && (1001 > p.samples)) {
      o.seed = p.seed;
      o.bins = p.bins;
      o.columns = p.columns;
      o.cards = (p.cards >> 2) << 2;
      o.samples = p.samples;
      p.run(o);
    } else {
      o.h = o.h + '<h2>Error</h2>The script must return an object containing member `run()` and optionally `cards` (4..52), `bins` (2..52), `seed` (>=0), `columns` (2..128), `samples` (1..1000)';
    }
  } catch (e) {
    printErr(e, o);
  }
  writeHtm(o.h);
}

function init() {
  st.random = (new Date) % 2147483648;
  if (!st.random) {
    st.random = 1;
  }
  getRandomBits(128);
}

function start() {
  if (0 > window.location.href.indexOf('#')) {
    window.location.href = window.location.href + '#';
  } else {
    run();
  }
  st.docClosed = 1;
}

init();
</script
><form name=f action=javascript:run()
><textarea name=t>'use strict';
function fisherYatesShuffle(v) {
  var n = v.length;
  var m = n - 1;
  var i = -1;
  while (m > (i = i + 1)) {
    swap(v, i, i + getRandom(n - i));
  }
}

function intersperseFaroHalves(v) {
  var n = v.length;
  var d = n >> 1;
  var w = new Array;
  var i = -1;
  while (n > (i = i + 1)) {
    w[i] = v[i];
  }
  i = -1;
  while (d > (i = i + 1)) {
    v[i + i] = w[i];
    v[i + i + 1] = w[i + d];
  }
}

function rifflePairSwapShuffle(v) {
  var n = v.length;
  intersperseFaroHalves(v);
  var i = -2;
  while (n > (i = i + 2)) {
    if (getRandomBits(1)) {
      swap(v, i, i + 1);
    }
  }
}

function rifflePairSwap6Shuffle(v) {
  var i = 7;
  while (i = i - 1) {
    rifflePairSwapShuffle(v);
  }
}

function rifflePickShuffle(v) {
  var n = v.length;
  var m = n >> 1;
  var u = new Array;
  var j = -1;
  var w = new Array;
  var k = -1;

  var i = -1;
  while (m > (i = i + 1)) {
    u[j = j + 1] = v[i];
    w[k = k + 1] = v[i + m];
  }
  m = j;
  var q = k;
  j = -1;
  k = -1;

  var i = -1;
  while (n > (i = i + 1)) {
    if ((k >= q) || ((m > j) && getRandomBits(1))) {
      v[i] = u[j = j + 1];
    } else {
      v[i] = w[k = k + 1];
    }
  }
}

function rifflePick6Shuffle(v) {
  var i = 7;
  while (i = i - 1) {
    rifflePickShuffle(v);
  }
}

function inverseRiffleShuffle(v) {
  var n = v.length;
  var u = new Array;
  var j = -1;
  var w = new Array;
  var k = -1;
  var i = n;
  while (i) {
    if (getRandomBits(1)) {
      u[j = j + 1] = v[i = i - 1];
    } else {
      w[k = k + 1] = v[i = i - 1];
    }
  }
  i = -1;
  j = j + 1;
  while (j) {
    v[i = i + 1] = u[j = j - 1];
  }
  k = k + 1;
  while (k) {
    v[i = i + 1] = w[k = k - 1];
  }
}

function inverseRiffle6Shuffle(v) {
  var i = 7;
  while (i = i - 1) {
    inverseRiffleShuffle(v);
  }
}

function riffleGilbertShannonReedsShuffle(v) {
  var n = v.length;
  var m = 1;
  var i = n + 1;
  while (i = i - 1) {
    if (getRandomBits(1)) {
      m = m + 1;
    }
  }

  var u = new Array;
  var j = -1;
  var w = new Array;
  var k = -1;
  i = -1;
  while (m = m - 1) {
    u[j = j + 1] = v[i = i + 1];
  }
  while (n > (i = i + 1)) {
    w[k = k + 1] = v[i];
  }
  m = j;
  var q = k;

  j = -1;
  k = -1;
  var i = -1;
  while (n > (i = i + 1)) {
    if ((k >= q) || ((m > j) && ((m-j) > getRandom((q-k) + (m-j))))) {
      v[i] = u[j = j + 1];
    } else {
      v[i] = w[k = k + 1];
    }
  }
}

function riffleGilbertShannonReeds6Shuffle(v) {
  var i = 7;
  while (i = i - 1) {
    riffleGilbertShannonReedsShuffle(v);
  }
}

function overhandShuffle(v) {
  var n = v.length;
  var w = new Array;
  var i = -1;
  while (n > (i = i + 1)) {
    w[i] = v[i];
  }
  var p = 6;
  var j;
  var k;
  var nm = n - 1;
  i = -1;
  while (nm > i) {
    if ((i + (k = getRandom(p) + 1)) >= n) {
      k = n - i;
    }
    j = nm - i - k;
    while (k = k - 1) {
      v[j = j + 1] = w[i = i + 1];
    }
  }
}

function overhand6Shuffle(v) {
  var i = 7;
  while (i = i - 1) {
    overhandShuffle(v);
  }
}

function wanderingDiceShuffle(v) {
  var n = v.length;
  var i = n + n + 1;
  var j = 0;
  var k;
  while (i = i - 1) {
    swap(v, j, k = (j + getRandom(36)) % n);
    j = k;
  }
}

function coinSplitShuffle0(y, v) {
  var n = v.length;
  if (2 > n) {
    return 0;
  }
  var u = new Array;
  var w = new Array;
  var i = -1;
  var j = -1;
  var k = -1;
  while (n > (i = i + 1)) {
    if (getRandomBits(1)) {
      u[j = j + 1] = v[i];
    } else {
      w[k = k + 1] = v[i];
    }
  }
  y(y, u);
  y(y, w);
  i = -1;

  n = u.length;
  j = -1;
  while (n > (j = j + 1)) {
    v[i = i + 1] = u[j];
  }

  n = w.length;
  k = -1;
  while (n > (k = k + 1)) {
    v[i = i + 1] = w[k];
  }
}

function coinSplitShuffle(v) {
  coinSplitShuffle0(coinSplitShuffle0, v);
}

function diceBookShuffle(v) {
  var n = v.length;
  var out = -1;
  var todo = new Array;
  var todos = 0;
  var bins = new Array;
  var bin;
  bins[0] = v;
  var i;
  var j;
  while (1) {
    i = -1;
    while (36 > (i = i + 1)) {
      if (bin = bins[i]) {
        if (bin.length - 1) {
          j = -1;
          while (bin.length > (j = j + 1)) {
            todo[todos] = bin[j];
            todos = todos + 1;
          }
        } else {
          v[out = out + 1] = bin[0];
        }
      }
      bins[i] = new Array;
    }
    if (!todos) {
      return 0;
    }

    while (todos) {
      bin = bins[getRandom(36)];
      bin[bin.length] = todo[todos = todos - 1];
    }
  }
}

function risingMetric(v) {
  var n = v.length;
  var s = 0;
  var old;
  var next = 1;
  var i;
  while (n >= next) {
    s = s + 1;
    old = next;
    i = -1;
    while (n > (i = i + 1)) {
      if (!(next - v[i])) {
        next = next + 1;
      }
    }
    if (!(old-next)) {
      return -1;
    }
  }
  return s;
}

function distanceMetric(v) {
  var n = v.length;
  var s = 0;
  var d;
  var i = -1;
  while (n > (i = i + 1)) {
    if (0 > (d = (i + 1) - v[i])) {
      d = 0 - d;
    }
    s = s + d;
  }
  return (s / n) | 0;
}

function offsetMetric(v) {
  var n = v.length;
  var s = 0;
  var i = -1;
  while (n > (i = i + 1)) {
    s = s + (((i + n + 1) - v[i]) % n);
  }
  return (s / n) | 0;
}

function neighborSwapMetric(v) {
  var n = v.length;
  var s = 0;
  var i = 0;
  while (n > (i = i + 1)) {
    if (v[i-1] > v[i]) {
      s = s + 1;
    }
  }
  return s;
}

function neighborOffsetMetric(v) {
  var n = v.length;
  var s = 0;
  var i = 0;
  while (n > (i = i + 1)) {
    s = s + ((n + (v[i] - v[i-1])) % n);
  }
  return (s / (n - 1)) | 0;
}

function neighbor2OffsetMetric(v) {
  var n = v.length;
  var s = 0;
  var i = 1;
  while (n > (i = i + 1)) {
    s = s + ((n + (v[i] - v[i-2])) % n);
  }
  return (s / (n - 2)) | 0;
}

function neighborNearMetric(v) {
  var n = v.length;
  var s = 0;
  var d;
  var i = 0;
  while (n > (i = i + 1)) {
    d = v[i] - v[i-1];
    if (0 > d) {
      d = 0 - d;
    }
    if (3 > d) {
      s = s + 1;
    }
  }
  return s;
}

function orbitalCyclesMetric(v) {
  var n = v.length;
  var s = 0;
  var path = new Array;
  var j;
  var i = -1;
  while (n > (i = i + 1)) {
    if (!path[j = i]) {
      while (!path[j]) {
        path[j] = 1;
        j = v[i] - 1;
      }
      s = s + 1;
    }
  }
  return s;
}

function inversionMetric(v) {
  var n = v.length;
  var s = 0;
  var j;
  var i = -1;
  while (n > (i = i + 1)) {
    j = -1;
    while (n > (j = j + 1)) {
      if ((v[i] > v[j]) ^ (i > j)) {
        s = s + 1;
      }
    }
  }
  return (s / n) | 0;
}

function mcGrathGuessNextMetric(v) {
  var s = 0;
  var n = v.length;
  var seen = new Array;
  var real;
  var guess;
  var longestLen = 0;
  var len;
  var j;

  var i = -1;
  while (n > (i = i + 1)) {
    guess = 0;

    longestLen = 0;
    len = 0;
    j = -1;
    while (n > (j = j + 1)) {
      if (seen[j]) {
        if (len > longestLen) {
          guess = j - len;
          longestLen = len;
        }
        len = 0;
      } else {
        len = len + 1;
      }
    }
    if (len > longestLen) {
      guess = j - len;
    }

    if (!(guess - (real = v[i] - 1))) {
      s = s + 1;
    }
    seen[real] = 1;
  }
  return s;
}

function runTests(o) {
  var m = new Object;
  m.rising = risingMetric;
  m.neighborSwap = neighborSwapMetric;
  m.neighborOffset= neighborOffsetMetric;
  m.neighbor2Offset = neighbor2OffsetMetric;
  m.neighborNear = neighborNearMetric;
  m.orbitalCycles = orbitalCyclesMetric;
  m.distance = distanceMetric;
  m.offset = offsetMetric;
  m.inversion = inversionMetric;
  m.mcGrathGuessNext = mcGrathGuessNextMetric;
  o.metrics = m;

  testShuffler(o, 'Fisher-Yates shuffle', fisherYatesShuffle);
  testShuffler(o, 'Gilbert-Shannon-Reeds riffle shuffle', riffleGilbertShannonReedsShuffle);
  testShuffler(o, 'Gilbert-Shannon-Reeds riffle shuffle 6 times', riffleGilbertShannonReeds6Shuffle);
  testShuffler(o, 'Inverse riffle shuffle', inverseRiffleShuffle);
  testShuffler(o, 'Inverse riffle shuffle 6 times', inverseRiffle6Shuffle);
  testShuffler(o, 'Riffle pair swap shuffle', rifflePairSwapShuffle);
  testShuffler(o, 'Riffle pair swap shuffle 6 times', rifflePairSwap6Shuffle);
  testShuffler(o, 'Riffle pick shuffle', rifflePickShuffle);
  testShuffler(o, 'Riffle pick shuffle 6 times', rifflePick6Shuffle);
  testShuffler(o, 'Overhand shuffle', overhandShuffle);
  testShuffler(o, 'Overhand shuffle 6 times', overhand6Shuffle);
  testShuffler(o, 'Coin split shuffle', coinSplitShuffle);
  testShuffler(o, 'Dice book shuffle', diceBookShuffle);
  testShuffler(o, 'Wandering dice shuffle', wanderingDiceShuffle);

  var v = getSequence(o);
  testMetrics(o, 'Metrics of sequence', v);

  var n = v.length;
  swap(v, 0, n - 1);
  testMetrics(o, 'Metrics of single swap', v);

  var d = n >> 1;
  var i = d;
  while (i = i - 1) {
    swap(v, i, n - 1 - i);
  }
  testMetrics(o, 'Metrics of reverse', v);

  i = d >> 1;
  while (i) {
    swap(v, i = i - 1, d - 1 - i);
  }
  testMetrics(o, 'Metrics of half reversed', v);

  v = getSequence(o);
  i = d;
  while (i) {
    swap(v, i = i - 1, i + d);
  }
  testMetrics(o, 'Metrics of halves swapped', v);

  v = getSequence(o);
  i = n;
  while (i) {
    swap(v, i = i - 1, i = i - 1);
  }
  testMetrics(o, 'Metrics of swapped neighbors', v);

  i = d;
  while (i) {
    swap(v, i = i - 1, n - 1 - (i = i - 1));
  }
  testMetrics(o, 'Metrics of reversed interspersed', v);

  v = getSequence(o);
  intersperseFaroHalves(v);
  testMetrics(o, 'Metrics of halves interspersed', v);
}

function tester() {
  var o = new Object;
  o.seed = 0;
  o.bins = 9;
  o.columns = 32;
  o.cards = 52;
  o.samples = 100;
  o.run = runTests;
  return o;
}

tester();</textarea
><input type=submit value=Run
>Shuffle and metrics scripts</form
><script>
'use strict';
start();
</script
></body></html>
