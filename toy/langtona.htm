<!DOCTYPE html>
<html lang=en>
<head>
  <meta charset=utf-8>
  <title>Langton's ant 2D automaton</title>
  <link rel='shortcut icon' type=image/x-icon href=data:image/x-icon;,>
  <meta property='og:description' content='Visualized simulation of a temporal computer theoretical state machine in JavaScript0 on GemiWeb0' name='description'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=no-referrer>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<!-- -->
  <meta http-equiv='Content-Security-Policy' content="default-src 'none'; font-src data: blob:; frame-src data: blob:; img-src data: blob:; manifest-src data: blob:; media-src data: blob:; style-src data: blob: 'unsafe-inline' 'unsafe-eval'; script-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body
><h2
>Explanation</h2
>A mobile agent is simulated which has the single state of its heading. Global state is stored in a grid of theoretically infinite binary cells. The grid starts with all blanks. Inspect the current value of the cell the agent is on top of at each step:<ul
><li
>If 0, turn 90 degrees clockwise.</li
><li
>If 1, turn 90 degrees counter-clockwise.</li
></ul
>Then add 1 to the cell value and move one step forward.<p
><a target=_blank href=https://en.wikipedia.org/wiki/Langton%27s_ant
>en.wikipedia.org/wiki/Langton's_ant</a
><h2
>Requirements</h2
>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:<p
><a target=_blank href=https://bkil.gitlab.io/gemiweb0
>bkil.gitlab.io/gemiweb0</a
><h2
>Simulation</h2
><script>
'use strict';
var st = new Object;

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(text) {
  var h = '';
  if (document.documentElement && document.documentElement.innerHTML) {
    h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
    h = h + '</head>';
  }
  h = '<!DOCTYPE html><html lang=en>' + h + '<body>' + text + '<' + '/body><' + '/html>';
  document.write(h);
  document.close();
}

function simulate() {
  var row = st.mem[st.y];
  if (!row) {
    row = new Array;
    st.mem[st.y] = row;
  }
  if (row[st.x]) {
    st.head = (st.head + 1) & 3;
    row[st.x] = 0;
  } else {
    st.head = (st.head + 3) & 3;
    row[st.x] = 1;
  }

  if (1 > st.head) {
    st.y = st.y - 1;
  } else if (2 > st.head) {
    st.x = st.x - 1;
  } else if (3 > st.head) {
    st.y = st.y + 1;
  } else {
    st.x = st.x + 1;
  }

  if (st.xmn > st.x) {
    st.xmn = st.x;
  }
  if (st.x > st.xmx) {
    st.xmx = st.x;
  }
  if (st.ymn > st.y) {
    st.ymn = st.y;
  }
  if (st.y > st.ymx) {
    st.ymx = st.y;
  }
  st.from = st.from + 1;
}

function showMem() {
  var label = '^{v}';
  label = label.charAt(st.head);
  var nl = String.fromCharCode(10);
  var j = st.ymn - 1;
  var i;
  var k;
  var row;
  var htm = '';
  while (st.ymx >= (j = j + 1)) {
    htm = htm + nl;
    row = st.mem[j];
    i = st.xmn - 1;
    while (st.xmx >= (i = i + 1)) {
      k = ' ';
      if (!(j - st.y) && !(i - st.x)) {
        k = label;
      } else if (row && row[i]) {
        k = '1';
      }
      htm = htm + k;
    }
  }
  return htm;
}

function step0(rec) {
  var i = st.batch + 1;
  while (i = i - 1) {
    simulate();
  }
  var htm = showMem();
  htm = '<a href=javascript:pause()>Pause</a><br><a href=javascript:speed()>' +
    st.batch +
    ' step/sec</a><pre role=img>' +
    htm +
    '</pre>';
  writeHtm(htm);

  var recRec = function() { rec(rec); };
  if (st.to >= st.from) {
    setTimeout(recRec, 1000);
  }
}

function step() {
  step0(step0);
}

function pause() {
  if (st.to > st.from) {
    st.to = st.from;
  } else {
    st.to = st.from + 13500;
    step();
  }
}

function speed() {
  if (10 > st.batch) {
    st.batch = 10;
  } else if (500 > st.batch) {
    st.batch = 500;
  } else {
    st.batch = 1;
  }
  if (st.from >= st.to) {
    pause();
  }
}

function init() {
  st.mem = new Array;
  st.head = 1;
  st.x = 22;
  st.y = 29;
  st.xmn = 0;
  st.xmx = st.x;
  st.ymn = 0;
  st.ymx = st.y;
  st.from = 0;
  st.to = 0;
  st.batch = 1;
  pause();
}
</script
><a href=javascript:init()
>Start</a
></body></html>
