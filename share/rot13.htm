<!DOCTYPE html>
<html lang=en prefix="og: http://ogp.me/ns#">
<head>
  <meta charset=utf-8>
  <meta http-equiv=content-type content='text/html; charset=UTF-8'>
  <meta http-equiv=x-content-type-options content=nosniff>
  <title>rot13 snippet</title>
  <link rel='shortcut icon' type='image/x-icon' href='data:image/x-icon;,'>
  <meta name=description property='og:description' content='Encode and decode text using a Caesar substitution cipher with key offset of 13 in JavaScript0 on GemiWeb0'>
  <meta property='og:title' content='rot13 snippet'>
  <meta property='og:type' content=article>
  <meta property='og:url' content='https://bkil.gitlab.io/static-wonders.js/share/rot13.htm'>
  <meta property='og:image' content='https://bkil.gitlab.io/gemiweb0/gemiweb0-avatar.png'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=unsafe-url>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<style>
textarea {
  min-width: 100%;
  max-width: 100%;
  width: 100%;
  min-height: 4em;
  height: 8em;
}

input {
  margin-left: 1em;
}
</style>
  <meta http-equiv=content-security-policy content="default-src 'none'; img-src data: 'self'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body>
<script>
// Copyright (c) 2025 bkil.hu
// SPDX-License-Identifier: MIT

'use strict';
var st = new Object;

// JS1
function strEqual(u, v) {
  return !(u.length - v.length) && !u.indexOf(v);
}

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  }
  var o = '';
  var c;
  if (to > th.length) {
    to = th.length;
  }
  from = from - 1;
  to = to - 1;
  while (to > from) {
    c = th.charAt(from = from + 1);
    o = o + c;
  }
  return o;
}

// ES3, NS5?
function encodeURIComponent_(s) {
  if (!strEqual(typeof encodeURIComponent, 'undefined')) {
    return encodeURIComponent(s);
  }
  var zero = String.fromCharCode(0);
  var i = 0;
  var safeList = "!'()*-._~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var safe = zero;
  var hex = '0123456789abcdef';
  while (127 > (i = i + 1)) {
    if (0 > safeList.indexOf(String.fromCharCode(i))) {
      safe = safe + zero;
    } else {
      safe = safe + '1';
    }
  }

  var o = '';
  i = -1;
  var n;
  var c;
  while (1) {
    c = s.charAt(i = i + 1);
    while (safe.charCodeAt(n = c.charCodeAt(0))) {
      o = o + c;
      c = s.charAt(i = i + 1);
    }
    if (isNaN(n)) {
      return o;
    }
    if (128 > n) {
      c = hex[n >> 4] + hex[n & 15];
      o = o + '%';
    }
    o = o + c;
  }
}

function getHexDigit(n) {
  if ((n > 47) && (58 > n)) {
    return n - 48;
  } else if ((n > 96) && (103 > n)) {
    return n - 87;
  } else if ((n > 64) && (71 > n)) {
    return n - 55;
  } else {
    return -1;
  }
}

// web API: Chrome 38, Firefox 20
function TextDecoder_decode(a) {
  if (!strEqual(typeof TextDecoder, 'undefined') &&
    !strEqual(typeof Uint8Array, 'undefined')) {
    return eval('(new TextDecoder).decode(new Uint8Array(a))');
  }
  var s = '';
  var i = -1;
  var n = a.length;
  var c;
  while (n > (i = i + 1)) {
    c = a[i];
    // FIXME
    if (128 > c) {
      c = String.fromCharCode(c);
      s = s + c;
    }
  }
  return s;
}

// ES3, NS5?
function decodeURIComponent_(s) {
  if (!strEqual(typeof decodeURIComponent, 'undefined')) {
    try {
      return decodeURIComponent(s);
    } catch (e) {
    }
  }
  var a = new Array;
  var j = -1;
  var i = -1;
  var n;
  var u;
  var v;
  while (s.length > (i = i + 1)) {
    n = s.charCodeAt(i);
    if (!(n - 37) && (s.length > (i + 2))) {
      u = getHexDigit(s.charCodeAt(i + 1));
      v = getHexDigit(s.charCodeAt(i + 2));
      if ((u >= 0) && (v >= 0)) {
        n = (u << 4) | v;
        i = i + 2;
      }
    }
    a[j = j + 1] = n;
  }
  return TextDecoder_decode(a);
}

function rot13(s) {
  var t = '';
  var u;
  var i = -1;
  while (s.length > (i = i + 1)) {
    if (((u = s.charCodeAt(i)) > 64) && (91 > u)) {
      u = (((u - 65) + 13) % 26) + 65;
    } else if ((u > 96) && (123 > u)) {
      u = (((u - 97) + 13) % 26) + 97;
    }
    t = t + String.fromCharCode(u);
  }
  return t;
}

function submit() {
  window.location.assign(st.base + '#' + encodeURIComponent_(window.f.t.value = rot13(window.f.t.value)));
  st.fragment = '';
}

function processFragment() {
  if (st.fragment) {
    window.f.t.value = st.fragment;
    submit();
  }
}

function init() {
  var h = window.location.href;
  var i = h.indexOf('#');
  if (i > 0) {
    st.fragment = decodeURIComponent_(String_substring(h, i + 1, h.length));
    h = String_substring(h, 0, i);
  }
  st.base = h;
}

init();
</script>
<form name=f action='javascript:submit()'
><textarea rows=6 cols=32 name=t
></textarea>Encode and decode text using a Caesar substitution cipher with key offset of 13<input type=submit value=Submit accesskey=s
></form>
<script>
'use strict';
processFragment();
</script>
<ul>
<li><a href='https://en.wikipedia.org/wiki/ROT13' target='_blank' rel=noopener>en.wikipedia.org/wiki/ROT13</a></li>
</ul>
<p>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:</p>
<ul><li><a href='https://bkil.gitlab.io/gemiweb0' target='_blank' rel=noopener>bkil.gitlab.io/gemiweb0</a></li></ul>
</body>
</html>
