<!DOCTYPE html>
<html lang=en>
<head>
  <meta charset=utf-8>
  <title>Memory pair matching game</title>
  <link rel='shortcut icon' type=image/x-icon href=data:image/x-icon;,>
  <meta property='og:description' content='Flip two cards at a time to eliminate matching characters. Example interactive app for Web0/JavaScript0/gemiweb' name='description'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=no-referrer>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<!-- -->
  <meta http-equiv=Content-Security-Policy content="default-src 'none'; font-src data: blob:; frame-src data: blob:; img-src data: blob:; manifest-src data: blob:; media-src data: blob:; style-src data: blob: 'unsafe-inline' 'unsafe-eval'; script-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body>
<script>
'use strict';
var dur = new Object;
var tmp = new Object;
var nl = String.fromCharCode(10);
var bs = String.fromCharCode(92);

// JS1
function strEqual(u, v) {
  return !(u.length - v.length) && !u.indexOf(v);
}

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

// JS1
function parseIntPlus(s) {
  if (!strEqual(typeof parseInt, 'undefined')) {
    return parseInt(s);
  } else {
    var k = 0;
    var i = -1;
    var c;
    while (s.length > (i = i + 1)) {
      c = s.charCodeAt(i) - 48;
      if ((0 > c) || (c > 9)) {
        return NaN;
      }
      k = (k * 10) + c;
    }
    return k;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(text) {
  if (tmp.docClosed) {
    var h = '';
    if (document.documentElement && document.documentElement.innerHTML) {
      h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
    }
    h = '<!DOCTYPE html><html lang=en>' + h + '</head><body>' + text + '<' + '/body><' + '/html>';
    document.write(h);
    document.close();
  } else {
    document.write(text);
  }
  if (window.f && window.f.t && window.f.t.focus) {
    window.f.t.focus();
  }
}

// JS1
function getRandomBits(n) {
  var x = dur.random;
  var i = n + 1;
  while (i = i - 1) {
    x = (((x >> 30) ^ (x >> 27)) & 1) ^ ((x & 1073741823) << 1);
  }
  dur.random = x;
  if (n > 31) {
    n = 31;
  }
  return x & ((1 << n) - 1);
}

function getRandom(m) {
  return getRandomBits(8) % m;
}

function print() {
  var j;
  var out = '';
  var i = 0;
  var col = dur.startCol;
  while (dur.place.length > i) {
    if (!tmp.showForm && (dur.pairs > dur.foundPairs)) {
      out = out + '<a href=javascript:key(' + i + ')>';
    }
    j = 0;
    while (col > j) {
      out = out + '. ';
      j = j + 1;
    }
    if (!(i - dur.pick1) || !(i - dur.pick2) || dur.found[i]) {
      out = out + dur.place[i];
    } else {
      out = out + i;
    }
    if (!tmp.showForm && (dur.pairs > dur.foundPairs)) {
      out = out + '</a>';
    }
    out = out + '<br>';
    col = (col + dur.stepCol) % dur.cols;
    i = i + 1;
  }

  var elapsed = ((new Date / 1000) | 0) - dur.startTime;
  out = out + dur.foundPairs + ' pairs in ' + dur.round + ' turns, ' + elapsed + 'sec, game ' + dur.game + '<br>';
  if (tmp.showForm) {
    out = out + 'Keys: 0..9=flip 10=links 11=new game';
    out = out + '<form name=f action="javascript:onSubmit()"><input name=t type=number min=0 max=11 placeholder=0..11 required><input type=submit></form>';
  } else {
    out = out + '<a href=javascript:key(10)>Show form</a><br>';
    out = out + '<a href=javascript:key(11)>New game</a>';
  }

  writeHtm(out);
}

function restart() {
  dur.round = 0;
  dur.foundPairs = 0;
  dur.startTime = (new Date / 1000) | 0;
  dur.startCol = getRandom(dur.cols);
  dur.stepCol = getRandom(2) + 2;
  dur.pick1 = -1;
  dur.pick2 = -1;

  var wholeSet = tmp.levels[dur.level];
  dur.level = (dur.level + 1) % tmp.levels.length;
  var pickedSet = '';

  var freeChar;
  var c;
  var pick;
  var j;
  var i = 0;
  while (dur.pairs > i) {
    freeChar = '';
    j = 0;
    while (wholeSet.length > j) {
      c = wholeSet.charAt(j);
      if (0 > pickedSet.indexOf(c)) {
        freeChar = freeChar + c;
      }
      j = j + 1;
    }

    pick = getRandom(freeChar.length);
    pickedSet = pickedSet + freeChar.charAt(pick);
    i = i + 1;
  }

  var cards = 2 * dur.pairs;
  var place = new Array;
  i = 0;
  while (cards > i) {
    place[i] = '';
    i = i + 1;
  }

  var freePlace;
  i = 0;
  while (cards > i) {
    freePlace = new Array;
    j = 0;
    while (place.length > j) {
      if (!place[j].length) {
        freePlace[freePlace.length] = j;
      }
      j = j + 1;
    }
    pick = getRandom(freePlace.length);
    j = freePlace[pick];
    place[j] = pickedSet.charAt(i >> 1);
    dur.found[j] = 0;
    i = i + 1;
  }
  dur.place = place;
  dur.game = dur.game + 1;
  print();
}

function key(k) {
  if ((0 > k) || (k > 11)) {
    print();
  } else if (!(k - 10)) {
    tmp.showForm = !tmp.showForm;
    print();
  } else if (!(k - 11)) {
    restart();
  } else if (dur.found[k]) {
    print();
  } else if (0 > dur.pick1) {
    dur.pick1 = k;
    print();
  } else if (!(k - dur.pick1)) {
    print();
  } else {
    dur.pick2 = k;
    if (strEqual(dur.place[dur.pick1], dur.place[dur.pick2])) {
      dur.found[dur.pick1] = 1;
      dur.found[dur.pick2] = 1;
      dur.foundPairs = dur.foundPairs + 1;
    }
    dur.round = dur.round + 1;
    print();
    dur.pick1 = -1;
    dur.pick2 = -1;
  }
}

function onSubmit() {
  if (!window.f.t.value) {
    return undefined;
  }
  var sel = parseIntPlus(window.f.t.value);
  if (isNaN(sel)) {
    print();
    return undefined;
  }
  key(sel);
  return undefined;
}

function init() {
  dur.random = (new Date) % 2147483648;
  if (!dur.random) {
    dur.random = 1;
  }
  getRandomBits(128);

  tmp.showForm = 0;
  var l = new Array;
  l[0] = '"`~^' + "'";
  l[1] = '()<>[]{}';
  l[2] = '@#$&%|';
  l[3] = '!?,:;=';
  l[4] = '+-*/_' + bs;
  tmp.levels = l;

  dur.found = new Array;
  dur.pairs = 5;
  dur.cols = 5;
  dur.game = 0;
  dur.level = getRandom(l.length);
  restart();
  tmp.docClosed = 1;
}

init();
</script>

<h2>Gameplay</h2>
You are initially presented with the numbered side of shuffled playing cards.
The flip side depicts a punctuation character.
There are five pairs of cards whose flip side matches.
<p>
Select two cards to flip at a time.
You need to remember what the other side of each card shows.
The goal is to eliminate each pair of matching cards by flipping them together.

<h2>Requirements</h2>
You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:
<p>
<a target=_blank href="https://bkil.gitlab.io/gemiweb0">https://bkil.gitlab.io/gemiweb0</a>

</body>
</html>
