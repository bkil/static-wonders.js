<!DOCTYPE html>
<html lang=en prefix="og: http://ogp.me/ns#">
<head>
  <meta charset=utf-8>
  <meta http-equiv=content-type content='text/html; charset=UTF-8'>
  <meta http-equiv=x-content-type-options content=nosniff>
  <title>Rock-paper-scissors numerical strategy game</title>
  <link rel='shortcut icon' type='image/x-icon' href='data:image/x-icon;,'>
  <meta name=description property='og:description' content='Simplified abstract tactical simulation inspired by PAX Britannica. Example interactive web0 app for JavaScript0/gemiweb0'>
  <meta property='og:title' content='Rock-paper-scissors numerical strategy game'>
  <meta property='og:type' content=article>
  <meta property='og:url' content='https://bkil.gitlab.io/static-wonders.js/game/rockpaps.htm'>
  <meta property='og:image' content='https://bkil.gitlab.io/gemiweb0/gemiweb0-avatar.png'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=unsafe-url>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<!-- -->
  <meta http-equiv=content-security-policy content="default-src 'none'; img-src data: 'self'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body>
<script>
'use strict';
var st = new Object;

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(body) {
  if (st.docClosed) {
    var h = '<head>';
    if (document.documentElement && document.documentElement.innerHTML) {
      h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
    }
    h = '<!DOCTYPE html><html lang=en>' + h + '</head><body>' + body + '<' + '/body><' + '/html>';
    document.write(h);
    document.close();
  } else {
    document.write(body);
  }
  if (window.f && window.f.t && window.f.t.focus) {
    window.f.t.focus();
  }
}

// JS1
function getRandomBits(n) {
  var x = st.random;
  var i = n + 1;
  while (i = i - 1) {
    x = (((x >> 30) ^ (x >> 27)) & 1) ^ ((x & 1073741823) << 1);
  }
  st.random = x;
  if (n > 31) {
    n = 31;
  }
  return x & ((1 << n) - 1);
}

function getRandom(m) {
  return getRandomBits(8) % m;
}

function printPlayer(out, who) {
  if (who) {
    out = out + 'Bot-' + String.fromCharCode(65 + who);
  } else {
    out = out + 'Me';
  }
  return out;
}

function printBar(out, char, x) {
  var i = 0;
  while (i < x) {
    out = out + char;
    i = i + 1;
  }
  return out;
}

function printShip(out, which) {
  var i = 0;
  var name;
  var char;
  if (!which) {
    name = 'Scout';
    char = 's';
  } else if (which - 1) {
    name = 'Defender';
    char = 'd';
  } else {
    name = 'Bomber';
    char = 'B';
  }

  if (st.gameOver || st.showForm) {
    out = out + name + '';
  } else {
    out = out + '<a href=javascript:key(' + (which + 1) + ')>build ' + name + '</a>';
  }

  var p;
  var width;
  var maxWidth = 5;
  out = out + '<pre role=img>';
  while (i < st.p.length) {
    p = st.p[i];
    if (i) {
      out = out + ' ';
    }
    out = printPlayer(out, i);
    out = out + ' ' + (p.s[which]) + ' ';
    width = p.s[which];
    if (width > maxWidth) {
      width = maxWidth;
    }
    out = printBar(out, char, width);
    if (p.action - (which + 1)) {
      out = out + ' ';
    } else {
      out = out + '+';
    }
    out = printBar(out, ' ', (maxWidth - width) + 1);
    i = i + 1;
  }
  return out + '</pre>';
}

function print() {
  var i;
  var p;
  var out = '';
  if (!st.gameOver && !st.showForm) {
    out = out + '<a href=javascript:key(0)>next round</a><br>';
  }
  out = out + 'Round ' + st.round + '<br>';
  out = printShip(out, 0);
  out = printShip(out, 1);
  out = printShip(out, 2);
  if (!st.gameOver && !st.showForm) {
    out = out + '<a href=javascript:key(4)>stop building</a>';
  }

  out = out + '<ul>';
  i = 0;
  while (i < st.p.length) {
    p = st.p[i];
    out = out + '<li>.';
    out = printBar(out, '.', p.h);
    out = out + ' ' + p.h + ' health, ' + p.r + ' funds ';
    out = printPlayer(out, i);
    out = out + '</li>';
    i = i + 1;
  }
  out = out + '</ul>';

  if (!st.gameOver && !st.showForm) {
    out = out + '<a href=javascript:key(5)>';
    if (st.auto) {
      out = out + 'pause';
    } else {
      out = out + 'resume';
    }
    out = out + ' automatic stepping</a><br>';
  }

  if (!st.showForm) {
    out = out + '<a href=javascript:key(6)>show form input</a><br>';
  }

  if (st.gameOver) {
    out = out + 'Game over.<br>';
    if (!st.showForm) {
      out = out + '<a href=javascript:key(7)>restart easy</a>';
      out = out + '<br><a href=javascript:key(8)>restart hard</a>';
    }
  }

  if (st.showForm) {
    out = out + 'Keys: 0=next 1=Scout 2=Bomber 3=Defender 4=idle 5=auto 6=links';
    if (st.gameOver) {
      out = out + ' 7=restart easy 8=restart hard';
    }
    out = out + '<form name=f action=javascript:onSubmit()><input name=t><input type=submit></form>';
  }

  writeHtm(out);
}

function build(player, ship, cost) {
  if ((player.action - ship - 1) || (player.r < cost)) {
    return 0;
  }
  player.s[ship] = player.s[ship] + 1;
  player.r = player.r - cost;
  return 1;
}

function hit(old, next, who, hqMiss) {
  var dest = (who + 1) % 3;
  if (old.s[who]) {
    if (next.s[dest]) {
      if (getRandom(old.s[who] + next.s[dest]) < next.s[dest]) {
        next.s[dest] = next.s[dest] - 1;
      }
    } else if (next.s[who]) {
      if ((2 * getRandom(old.s[who] + next.s[who])) < next.s[who]) {
        next.s[who] = next.s[who] - 1;
      }
    } else if (next.h) {
      if (getRandom(hqMiss) < old.s[who]) {
        next.h = next.h - 1;
      }
    }
  }
}

function ai(p, i, built) {
  if (!i) {
    return 0;
  }
  var r;
  var q;
  var j;
  var s0 = 0;
  var s1 = 0;
  var s2 = 0;
  if ((i - 1) || !st.ai) {
    if (p.action && !built) {
      return 0;
    }
    r = getRandom(7);
    if (r < 1) {
      p.action = 3;
    } else if (r < 3) {
      p.action = 2;
    } else {
      p.action = 1;
    }

  } else {
    j = -1;
    while (st.p.length > (j = j + 1)) {
      if (i - j) {
        q = st.p[j];
        s0 = s0 || q.s[0];
        s1 = s1 || q.s[1];
        s2 = s2 || q.s[2];
      }
    }
    if (s1 && !p.s[0]) {
      p.action = 1;
    } else if (s2 && !p.s[1]) {
      p.action = 2;
    } else if (s0 && !p.s[2]) {
      p.action = 3;
    } else {
      p.action = getRandom(3) + 1;
    }
  }
}

function step() {
  if (st.gameOver) {
    print();
    return 0;
  }

  var p;
  var q;
  var old = new Array;
  var i = 0;
  while (i < st.p.length) {
    p = st.p[i];
    q = new Object;
    q.s = new Array;
    q.s[0] = p.s[0];
    q.s[1] = p.s[1];
    q.s[2] = p.s[2];
    old[i] = q;
    i = i + 1;
  }

  var j;
  i = 0;
  while (i < old.length) {
    p = old[i];
    j = 0;
    while (j < st.p.length) {
      if (i - j) {
        q = st.p[j];
        hit(p, q, 0, 8);
        hit(p, q, 1, 4);
        hit(p, q, 2, 2);
      }
      j = j + 1;
    }
    i = i + 1;
  }

  i = 0;
  var allAlive = 0;
  while (i < st.p.length) {
    p = st.p[i];
    if (p.h) {
      p.r = p.r + 1;
    } else {
      p.r = 0;
    }
    if (p.h + p.s[0] + p.s[1] + p.s[2]) {
      allAlive = allAlive + 1;
    }
    i = i + 1;
  }
  st.gameOver = allAlive < 2;

  i = 0;
  var built;
  while (i < st.p.length) {
    p = st.p[i];
    if (p.h) {
      built = build(p, 0, 2) || build(p, 1, 4) || build(p, 2, 8);
      ai(p, i, built);
    } else {
      p.action = 4;
    }

    i = i + 1;
  }

  st.round = st.round + 1;
  print();
}

function autoStep(self) {
  if (st.auto && !st.gameOver) {
    if (!st.pause) {
      step();
    }
    setTimeout(function(){ self(self); }, 2000);
  }
}

function startAuto() {
  print();
  if (st.auto && !st.gameOver) {
    setTimeout(function(){ autoStep(autoStep); }, 2000);
  }
}

function restart() {
  var p;
  st.gameOver = 0;
  st.round = 0;
  st.p = new Array;
  var i = -1;
  while (3 > (i = i + 1)) {
    p = new Object;
    if (i) {
      p.action = getRandom(3) + 1;
    } else {
      p.action = 4;
    }
    p.h = 9;
    p.r = 0;
    p.s = new Array;
    p.s[0] = 0;
    p.s[1] = 0;
    p.s[2] = 0;
    st.p[i] = p;
  }
  startAuto();
}

function key(k) {
  if ((0 > k) || (k > 8)) {
    print();
  } else if (!(k - 8)) {
    st.ai = 1;
    restart();
  } else if (!(k - 7)) {
    st.ai = 0;
    restart();
  } else if (!(k - 6)) {
    st.showForm = !st.showForm;
    print();
  } else if (!(k - 5)) {
    st.auto = !st.auto;
    startAuto();
  } else {
    if (k) {
      var p = st.p[0];
      p.action = k;
    }
    step();
  }
}

function onSubmit() {
  try {
    if (!window.f.t.value) {
      step();
      return undefined;
    }

    var sel = parseInt(window.f.t.value);
    if (isNaN(sel)) {
      print();
      return undefined;
    }
    key(sel);
  } catch (e) {
    console.log(e);
  }
  return undefined;
}

function init() {
  st.random = (new Date) % 2147483648;
  if (!st.random) {
    st.random = 1;
  }
  getRandomBits(128);

  st.showForm = 0;
  st.ai = 1;
  st.auto = 0;
  restart();
  st.docClosed = 1;
}

init();
</script>

<h2>Gameplay</h2>
This is a simplified abstract tactical strategy simulation game inspired by PAX Britannica.
You control one shipyard (Me) while the computer controls two other opponents: Bot-B and Bot-C.
Each player gains +1 resource every round.
Your goal is to destroy the shipyard of the opponents.

<h2>Commands</h2>
You can select the default ship type to build continuously or you can tell your shipyard to temporarily stop and gather resources.
<p>
You can select "Resume automatic stepping" for real time live action so you don't have to click to progress every round.
<p>
You can switch the user interface to expert mode offering form input catering to keyboard users.
Type 6 and press enter to switch back to clickable links.

<h2>Ships</h2>
<ul>
<li>Scout: costs 2, damages: 1/2 bomber, 1/4 scout, 1/8 shipyard</li>
<li>Bomber: costs 4, damages: 1/2 defender, 1/4 bomber, 1/4 shipyard</li>
<li>Defender: costs 8, damages: 1/2 scout, 1/4 defender, 1/2 shipyard</li>
</ul>

<h2>Requirements</h2>
<p>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:</p>
<a href='https://bkil.gitlab.io/gemiweb0' target='_blank' rel=noopener>bkil.gitlab.io/gemiweb0</a>
</body>
</html>
