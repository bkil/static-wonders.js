<!DOCTYPE html>
<html lang=en>
<head>
  <meta charset=utf-8>
  <title>Numerical sequence memory game</title>
  <link rel='shortcut icon' type=image/x-icon href=data:image/x-icon;,>
  <meta property='og:description' content='A sequence of numbers is displayed to remember. You need to recall them in order. The list gets longer after each successful repetition. Play a JavaScript0 game on GemiWeb0' name='description'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=no-referrer>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<!-- -->
  <meta http-equiv='Content-Security-Policy' content="default-src 'none'; img-src data: 'self'; script-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body
><h2
>Usage</h2
>A sequence of numbers is displayed to remember. You need to recall them in order. The list gets longer after each successful repetition.<h2
>Requirements</h2
>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:<p
><a target=_blank href=https://bkil.gitlab.io/gemiweb0
>bkil.gitlab.io/gemiweb0</a
><p
><script>
'use strict';
var st = new Object;

// JS1
function strEqual(u, v) {
  return !(u.length - v.length) && !u.indexOf(v);
}

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(text) {
  if (st.docClosed) {
    var h = '';
    if (document.documentElement && document.documentElement.innerHTML) {
      h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
    }
    h = '<!DOCTYPE html><html lang=en>' + h + '</head><body>' + text + '<' + '/body><' + '/html>';
    document.write(h);
    document.close();
  } else {
    document.write(text);
  }
  if (window.f && window.f.t && window.f.t.focus) {
    window.f.t.focus();
  }
}

// JS1
function getRandomBits(n) {
  var x = st.random;
  var i = n + 1;
  while (i = i - 1) {
    x = (((x >> 30) ^ (x >> 27)) & 1) ^ ((x & 1073741823) << 1);
  }
  st.random = x;
  if (n > 31) {
    n = 31;
  }
  return x & ((1 << n) - 1);
}

function getRandom(m) {
  return getRandomBits(8) % m;
}

function getBad() {
  if (st.goal.length & 1) {
    return 'No';
  }
  return 'Bad';
}

function getNext() {
  var prev = st.goal.charCodeAt(st.goal.length - 1) - 48;
  st.goal = st.goal + (((prev + getRandom(8)) % 9) + 1);
  if (st.goal.length & 1) {
    return 'Yes';
  }
  return 'Good';
}

function renderNextInput() {
  var h = '';
  var i = 0;
  while (10 > (i = i + 1)) {
    h = h + '<a href="javascript:inputNext(' + i + ')">' + i + '</a><br>';
  }
  h = h + 'Choose next digit';
  if (st.seqDisplay) {
    h = h + '<br><a href="javascript:configure()">Configure</a>';
  }
  writeHtm(h);
}

function input() {
  var h = '';
  if (st.seqInput) {
    st.inputI = 0;
    renderNextInput();
  } else {
    h = h + '<form name=f autocomplete=off action="javascript:submitInput()">Input sequence<input name=t';
    if (!st.showInput) {
      h = h + ' type=password';
    }
    h = h + ' autocomplete=off min=0 minlength=1><input type=submit></form>';
    if (st.seqDisplay) {
      h = h + ' Type 0 to configure';
    }
    writeHtm(h);
  }
}

function renderGoalSeq0(rec) {
  var recRec = function() { rec(rec); };
  var h = '';
  var i = st.renderI;
  if (st.goal.length > i) {
    h = h + st.goal.charAt(i);
    writeHtm(h);
    st.renderI = i + 1;
    setTimeout(recRec, st.delay);
  } else {
    input();
  }
}

function renderGoalSeq() {
  renderGoalSeq0(renderGoalSeq0);
}

function renderGoal(msg) {
  var h = '';
  if (st.seqDisplay) {
    st.renderI = 0;
    if (msg) {
      writeHtm(msg);
      setTimeout(renderGoalSeq, st.delay);
    } else {
      renderGoalSeq();
    }
  } else {
    h = h + st.goal;
    h = h + '<p><a href="javascript:input()">Input</a>';
    h = h + '<p><a href="javascript:configure()">Configure</a>';
    if (msg) {
      h = h + '<p>' + msg;
    }
    writeHtm(h);
  }
}

function inputNext(digit) {
  var i = st.inputI;
  if (st.goal.charCodeAt(i) - (digit + 48)) {
    renderGoal(getBad());
  } else {
    st.inputI = i + 1;
    if (st.goal.length > st.inputI) {
      renderNextInput();
    } else {
      renderGoal(getNext());
    }
  }
}

function configure() {
  var h = '';
  if (st.seqInput) {
    h = h + '<p><a href="javascript:st.seqInput=0;configure()">Input whole sequence at once in form</a>';
  } else {
    h = h + '<p><a href="javascript:st.seqInput=1;configure()">Input individual digits with links</a>';
  }
  if (!st.seqInput) {
    if (st.showInput) {
      h = h + '<p><a href="javascript:st.showInput=0;configure()">Hide form input while typing</a>';
    } else {
      h = h + '<p><a href="javascript:st.showInput=1;configure()">Show form input while typing</a>';
    }
  }
  if (st.seqDisplay) {
    h = h + '<p><a href="javascript:st.seqDisplay=0;configure()">Display whole sequence at once</a>';
  } else {
    h = h + '<p><a href="javascript:st.seqDisplay=1;configure()">Display individual digits with delay</a>';
  }
  h = h + '<p><a href="javascript:renderGoal(' + "''" + ')">Continue</a>';
  writeHtm(h);
}

function submitInput() {
  var input = '';
  if (window.f && window.f.t && window.f.t.value) {
    input = window.f.t.value;
  }
  if (strEqual(input, '0')) {
    configure();
  } else if (strEqual(input, st.goal)) {
    renderGoal(getNext());
  } else {
    renderGoal(getBad());
  }
}

function init() {
  st.random = (new Date) % 2147483648;
  if (!st.random) {
    st.random = 1;
  }
  getRandomBits(128);

  st.delay = 1000;
  st.goal = '' + (1 + getRandom(9));
  renderGoal('');
  st.docClosed = 1;
}

init();
</script
></body></html>
