<!DOCTYPE html>
<html lang=en prefix="og: http://ogp.me/ns#">
<head>
  <meta charset=utf-8>
  <meta http-equiv=content-type content='text/html; charset=UTF-8'>
  <meta http-equiv=x-content-type-options content=nosniff>
  <title>Cat maze</title>
  <meta http-equiv=content-security-policy content="default-src 'none'; img-src data: 'self'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
  <link rel='shortcut icon' type='image/x-icon' href='data:image/x-icon;,'>
  <meta property='og:description' content='Collect gems and push boulders that obey gravity, destroy crates, climb on ladders and walk on platforms to play the original levels of the catrap puzzle game in JavaScript0 on GemiWeb0' name='description'>
  <meta property='og:title' content='Cat maze'>
  <meta property='og:type' content=article>
  <meta property='og:url' content='https://bkil.gitlab.io/static-wonders.js/game/catmaze.htm'>
  <meta property='og:image' content='https://bkil.gitlab.io/gemiweb0/gemiweb0-avatar.png'>
  <meta name=author content=bkil.hu>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=unsafe-url>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<style>
textarea {
  display: block;
  font-family: monospace;
  font-size: xx-large;
}

input {
  padding: 8px;
}

.a {
  padding: 8px;
  display: block;
  display: inline-block;
  border-style: solid;
  border-width: 1px;
  text-decoration: none;
}

.p {
  margin: 0;
  display: inline-block;
}
</style>
</head>
<body>
<script>
'use strict';
var st = new Object;
var nl = String.fromCharCode(10);

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  }
  var c;
  from = from - 1;
  var o = '';
  while ((th.length > (from = from + 1)) && (to > from)) {
    c = th.charAt(from);
    o = o + c;
  }
  return o;
}

// ES1, NS3
function String_split(th, d) {
  if (th.split) {
    return th.split(d);
  }
  var a = new Array;
  var j = -1;
  var from = 0;
  var i;
  while ((i = th.indexOf(d, from)) >= 0) {
    a[j = j + 1] = String_substring(th, from, i);
    from = i + d.length;
  }
  a[j = j + 1] = String_substring(th, from, th.length);
  return a;
}

function render() {
  var t = '';
  var map = st.map;
  var n = map.length;
  var row;
  var j;
  var c;
  var i = -1;
  while (n > (i = i + 1)) {
    if (i) {
      t = t + nl;
    }
    row = map[i];
    j = -1;
    while (row.length > (j = j + 1)) {
      c = row.charAt(j);
      if (!(st.x - j) && !(st.y - i)) {
        if (c.charCodeAt(0) - 72) {
          c = '@';
        } else {
          c = '^';
        }
      }
      t = t + c;
    }
  }
  window.f.t.value = t;
}

function startLevel() {
  var map = st.maps[st.level];
  var n = map.length;
  var map2 = new Array;
  var row;
  var row2;
  var u;
  var c;
  var j;
  st.gems = 0;
  var i = -1;
  while (n > (i = i + 1)) {
    row = map[i];
    row2 = '';
    j = -1;
    while (row.length > (j = j + 1)) {
      c = row.charAt(j);
      if (!((u = row.charCodeAt(j)) - 64)) {
        st.x = j;
        st.y = i;
        c = ' ';
      } else if (!(u - 36)) {
        st.gems = st.gems + 1;
      }
      row2 = row2 + c;
    }
    map2[i] = row2;
  }
  st.map = map2;
}

function restart() {
  startLevel();
  render();
}

function next() {
  st.level = (st.level + 1) % st.maps.length;
  restart();
}

function cell(x, y) {
  if ((0 > y) || (y >= st.map.length)) {
    return 0;
  }
  var row = st.map[y];
  if ((0 > x) || (x >= row.length)) {
    return 0;
  }
  return row.charCodeAt(x);
}

function setCell(x, y, c) {
  var s = st.map[y];
  st.map[y] = String_substring(s, 0, x) + c + String_substring(s, x + 1, s.length);
}

function compact(x, y) {
  var u;
  while (!(cell(x, y) - 32) && (!((u = cell(x, y - 1)) - 36) || !(u - 111))) {
    setCell(x, y, String.fromCharCode(u));
    setCell(x, y = y - 1, ' ');
  }
}

function fall(x, y) {
  while (!(cell(x, y + 1) - 32)) {
    compact(x, y = y + 1);
  }
  return y;
}

function walk(dx, dy) {
  var u = cell(st.x + dx, st.y + dy);
  if (dy && !(!(cell(st.x, st.y) - 72) || ((dy > 0) && !(u - 72)))) {
    return 0;
  } else if (!dy && !(u - 111) && (!(cell(st.x + dx + dx, st.y) - 32))) {
    setCell(st.x + dx + dx, st.y, 'o');
    fall(st.x + dx + dx, st.y);
  } else if (!(u - 36)) {
    st.gems = st.gems - 1;
  } else if ((u - 32) && (u - 46) && (u - 72)) {
    return 0;
  }

  compact(st.x, st.y);
  st.x = st.x + dx;
  st.y = st.y + dy;
  if (u - 72) {
    setCell(st.x, st.y, 'o');
    st.y = fall(st.x, st.y);
    setCell(st.x, st.y, ' ');
  }
  if (st.gems) {
    render();
  } else {
    next();
  }
}

function left() {
  walk(-1, 0);
}

function right() {
  walk(1, 0);
}

function up() {
  walk(0, -1);
}

function down() {
  walk(0, 1);
}

function load() {
  var t = window.f.t.value;
  var a = String_split(t, nl);
  var n = a.length;
  var maps = new Array;
  var mapsI = -1;
  var map;
  var mapI;
  var s;
  var i = -1;
  while (n > i) {
    while ((n > (i = i + 1)) && (!(s = a[i]))) {
    }
    if (s) {
      map = new Array;
      map[0] = s;
      mapI = 0;
      while ((n > (i = i + 1)) && (s = a[i])) {
        map[mapI = mapI + 1] = s;
      }
      maps[mapsI = mapsI + 1] = map;
    }
  }
  st.maps = maps;
}

function onKeydown(e) {
  var i = e.keyCode;
  if (!(i - 37)) {
    left();
  } else if (!(i - 39)) {
    right();
  } else if (!(i - 38)) {
    up();
  } else if (!(i - 40)) {
    down();
  } else {
    i = 0;
  }
  if (i) {
    e.preventDefault();
  }
}

function init() {
  load();
  st.level = 0;
  startLevel();
  render();
  if (window.f.t.addEventListener) {
    window.f.t.addEventListener('keydown', onKeydown);
  }
}
</script>
<form name=f action='javascript:next()'>
<input type=submit accesskey=n value=Next>
<p class=p><a class=a accesskey=a href='javascript:restart()'>Again</a></p>
<textarea name=t accesskey=t role=img rows=9 cols=12 readonly autocomplete=off>
   o       
H##o# ####H
H  o #    H
H @.      H
#### #    H
    #     H
$        oH
### ### ###

  o        
  o o      
  #H$.     
  #H.$$   $
  #H... ...
$ #H  ...  
# #H      @
# #########

    @ # o  
    oH#Ho  
   $oH#H$  
  $..H#H$$ 
 #$HHH#H## 
 ######H#$ 
       H## 
 ######### 

     o     
 $   .    $
 .H H$#o# H
   $H.#$#o 
 $ .H .o.$ 
$.H H@...o 
.  $ ###..H
.$H.#$....H

###########
o$o    #..#
oooH#H #..#
...  H #..#
  $H#H #..#
.oo  H #..#
$H$H#H #..#
H $  H@####

  o        
 @o o      
H.. H      
H  ....HHH 
....$  H#o$
    . ## oo
$    #  H$o
# #.H H#H.$

 HH o   ###
 Ho o  @#.#
 Ho $##H#.#
 Ho HooH#.#
#H# $..H#.#
#H  HH###.#
##  #H#...#
.# $HH#####

... #  HHHH
...@#$ . $H
...H#o .$oH
.ooH#. .#oH
 .oH#  . oH
  .H#HHH .H
 $#H###H##H
 HHH      H

    o  $ #.
H##Ho H# #.
H #H$ H# #.
H #H$ ## ##
H #Ho ##  H
H ###.   #H
H  $  ####H
H  H  @   H

  @   #.. $
 o...H#$..o
 $..HH#o.H.
 . .H#...H.
  o H#H..H.
 .#.H #H H.
H#H . .#H..
. H..H..H$.

  o  H  o  
  ###H  o  
        oHH
  #####o.oH
  HHHHHo oH
  H.$. . .H
$ H o$ #  H
H H $H # @H

.$$  #$ $..
.o#$H #Ho .
H.#..H #.H 
H.#...H # H
H. ....H Ho
H@#HH.HH#o$
..#HoH HH.o
...H...   H

   o       
   o     # 
 HHo ###H  
 Ho.oo     
 Ho .o     
 H. ..   $ 
@H  o   $o 
##HH.   H$ 

  o  @  o  
HHHHH.HHHHH
H  o . o  H
H .$. .$. H
H .#. .#. H
H ... ... H
H   H H   H
H   H H   H

o   ##o  o.
. @o  .  $H
H#..H... ..
 $o H.. .  
....H  H . 
$#o H# #   
o .....  $ 
.H     H # 

HHHHH      
H$ooHo$    
Ho$oH$oo   
H$o$Ho.$H  
Ho$oH$ooH  
H.$$Ho$.H  
##H#H$oHH $
#$H#HHHH@ H

H         H
H...o...o.H
H .$@ .$o H
H ..o .o$ H
H .$$ ... H
H  .$ $o  H
H  $oo.o  H
H .... .. H

      ..#o#
H##o.H..#$#
H# $#Ho.#o#
HH o H..#o#
H  ...  ...
 HH#.....oo
H @o o   ..
# ## # #H$H

   o       
 #o#Ho###H 
  oo .@  H 
 $.. ..  H 
 .# H    H 
$  .     H 
# ######## 
# #        

    #..#oo 
   $####oo 
   .HHH#.HH
  o o H$  H
HHo.o  #  H
H@..o  $  H
H. ..  #  H
HHHHHHH#  H

.o         
.@ #######H
 .$o      H
. .$o     H
 . .$o    H
. . .$o   H
 . . .$   H
. . . .   H

HHo@o      
H oHo      
H oHo      
H #o#oH    
H  o o H   
H ## # ##  
H  o o #  $
H ## # #  #
</textarea>
<p class=p><a class=a accesskey=u href='javascript:up()'>Up</a></p>
<p class=p><a class=a accesskey=o href='javascript:down()'>dOwn</a></p>
<p class=p><a class=a accesskey=l href='javascript:left()'>Left</a></p>
<p class=p><a class=a accesskey=r href='javascript:right()'>Right</a></p>
</form>
<h2>Explanation</h2>
Collect gems ($) and push boulders (o) that obey gravity, destroy crates (.), climb ladders (H) and walk on platforms (#) to play the game. You can also use the arrow keys on the keyboard after you activate the Textarea of the map. The original levels are Copyright (c) 1985 Yutaka Isokawa
<ul><li><a target=_blank href='https://en.wikipedia.org/wiki/Catrap' target='_blank' rel=noopener>en.wikipedia.org/wiki/Catrap</a></li></ul>
<h2>Requirements</h2>
<p>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:</p>
<ul><li><a href='https://bkil.gitlab.io/gemiweb0' target='_blank' rel=noopener>bkil.gitlab.io/gemiweb0</a></li></ul>
<script>
'use strict';
init();
</script>
</body></html>
