<!DOCTYPE html>
<html lang=en prefix="og: http://ogp.me/ns#">
<head>
  <meta charset=utf-8>
  <meta http-equiv=content-type content='text/html; charset=UTF-8'>
  <meta http-equiv=x-content-type-options content=nosniff>
  <title>Guard pet by placing pillows in its way</title>
  <link rel='shortcut icon' type='image/x-icon' href='data:image/x-icon;,'>
  <meta name=description property='og:description' content='Play an example JavaScript0 board game for GemiWeb0 to surround a computer AI controlled opponent trying to escape one step at a time.'>
  <meta property='og:title' content='Guard pet by placing pillows in its way'>
  <meta property='og:type' content=article>
  <meta property='og:url' content='https://bkil.gitlab.io/static-wonders.js/game/guard.htm'>
  <meta property='og:image' content='https://bkil.gitlab.io/gemiweb0/gemiweb0-avatar.png'>
  <meta name=viewport content='width=device-width, initial-scale=1'>
  <meta name=referrer content=unsafe-url>
  <meta http-equiv=x-dns-prefetch-control content=off>
  <meta name=color-scheme content='light dark'>
<style>
.n, .a {
  text-decoration: none;
}

.a {
  padding: 8px;
  display: block;
  display: inline-block;
  border-style: solid;
}
</style>
<!-- -->
  <meta http-equiv=content-security-policy content="default-src 'none'; img-src data: 'self'; style-src 'unsafe-inline'; script-src 'unsafe-inline'; base-uri 'none'; form-action javascript:; navigate-to 'none';">
</head>
<body><h2
>Rules</h2
>Your pet is trying to escape one step at a time. After each step, you can place a pillow on the board to block its way so it can't escape and get lost. You win if you could completely surround it before it can get out of sight.<h2
>Play</h2
><script>
'use strict';
var st = new Object;

// JS1
function strEqual(u, v) {
  return !(u.length - v.length) && !u.indexOf(v);
}

// JS1
function String_substring(th, from, to) {
  if (th.substring) {
    return th.substring(from, to);
  } else {
    var o = '';
    var c;
    if (to > th.length) {
      to = th.length;
    }
    from = from - 1;
    to = to - 1;
    while (to > from) {
      c = th.charAt(from = from + 1);
      o = o + c;
    }
    return o;
  }
}

// JS1
function parseIntPlus(s) {
  if (!strEqual(typeof parseInt, 'undefined')) {
    return parseInt(s);
  } else {
    var k = 0;
    var i = -1;
    var c;
    while (s.length > (i = i + 1)) {
      c = s.charCodeAt(i) - 48;
      if ((0 > c) || (c > 9)) {
        return NaN;
      }
      k = (k * 10) + c;
    }
    return k;
  }
}

function removeAfter(s, t) {
  var i = s.indexOf(t);
  if (i >= 0) {
    s = String_substring(s, 0, i + t.length);
  }
  return s;
}

function writeHtm(text) {
  var h = '';
  if (document.documentElement && document.documentElement.innerHTML) {
    h = removeAfter(document.documentElement.innerHTML, '<' + '!-- --' + '>');
  }
  h = '<!DOCTYPE html><html lang=en>' + h + '</head><body>' + text + '<' + '/body><' + '/html>';
  document.write(h);
  document.close();
  if (window.f && window.f.t && window.f.t.focus) {
    window.f.t.focus();
  }
}

// JS1
function getRandomBits(n) {
  var x = st.random;
  var i = n + 1;
  while (i = i - 1) {
    x = (((x >> 30) ^ (x >> 27)) & 1) ^ ((x & 1073741823) << 1);
  }
  st.random = x;
  if (n > 31) {
    n = 31;
  }
  return x & ((1 << n) - 1);
}

function getRandom(m) {
  return getRandomBits(8) % m;
}

function render(msg) {
  var h = '<pre role=img>';
  var nl = String.fromCharCode(10);
  var bs = String.fromCharCode(92);
  var x = -1;
  var b = st.board;
  var c;
  var y;
  var i = 10;
  var iy = 10 * st.height;
  var py = 1;
  var xy;
  var w = st.width;
  while (w > x) {
    if (py = !py) {
      h = h + bs + '__';
      y = -1;
    } else {
      x = x + 1;
      y = -2;
      i = i + 1;
    }
    h = h + '/';
    while (st.height > (y = y + 2)) {
      xy = (y * w) + x;
      if (x >= w) {
        c = '  ';
      } else if (!st.lost && !(x - st.x) && !(y - st.y)) {
        c = '@ ';
      } else if (c = b[xy]) {
        if (st.win || st.lost) {
          if (10 > c) {
            c = c + ' ';
          }
        } else {
          c = '. ';
        }
      } else if (st.win || st.lost) {
        if (st.pet[xy]) {
          c = ': ';
        } else {
          c = '  ';
        }
      } else {
        if (st.inline) {
          c = '<a class=n href="javascript:step(' + i + ')">' + i + '</a>';
        } else {
          c = '' + i;
        }
      }
      h = h + c + bs;
      if (py || (iy >= i)) {
        h = h + '__/';
      }
      i = i + 20;
    }
    i = i - iy;
    h = h + nl;
  }
  h = h + '</pre>';

  if (st.win || st.lost) {
    if (st.win) {
      h = h + 'The pet is safe.';
    } else {
      h = h + 'The pet ran away.';
    }
    h = h + ' <a href="javascript:restart()" class=a>Restart</a>';
  } else if (st.inline) {
    h = h + '<a href="javascript:setInline(0)" class=a>Switch inline links to form input</a>';
  } else {
    h = h + '<form name=f autocomplete=off action="javascript:submitStep()">Select coordinate<input name=t type=number min=0 max=99 placeholder=11..99 minlength=2 maxlength=2 size=2><input type=submit></form>';
    h = h + ' Type 0 to switch form to inline links';
  }
  if (msg) {
    h = h + '<br>' + msg;
  }
  writeHtm(h);
}

function setInline(i) {
  st.inline = i;
  render('');
}

function generate() {
  st.step = 1;
  st.win = 0;
  st.lost = 0;
  var w = st.width;
  st.x = w >> 1;
  st.y = st.height >> 1;

  var pet = new Array;
  var o = new Array;
  var i = w * st.height;
  while (i) {
    pet[i = i - 1] = 0;
    o[i] = 0;
  }
  var xy0 = (w * st.y) + st.x;
  pet[xy0] = 1;
  o[xy0] = 1;
  st.pet = pet;

  var xy;
  i = st.barriers;
  while (i) {
    xy = (getRandom(st.height) * w) + getRandom(w);
    if (!o[xy]) {
      o[xy] = 1;
      i = i - 1;
    }
  }
  o[xy0] = 0;
  st.board = o;
}

function markNeighbor(xy0, x, y, t) {
  var w = st.width;
  if ((0 > x) || (0 > y) || (x >= w) || (y >= st.height)) {
    return 1;
  }
  var xy = (y * w) + x;
  var pxy = t.pxy;
  if ((pxy[xy] >= 0) || st.board[xy] || (!(x - st.x) && !(y - st.y))) {
    return 0;
  }

  pxy[xy] = xy0;
  var s = t.s;
  s[s.length] = x;
  s[s.length] = y;
  return 0;
}

function stepNumber(index) {
  if (!index) {
    setInline(1);
    return '';
  }
  if (st.win || st.lost) {
    return '';
  }
  var y = ((index / 10) | 0) - 1;
  var x = (index % 10) - 1;
  var w = st.width;
  var err = 'Expecting an available coordinate';
  if ((0 > x) || (0 > y) || (x >= w) || (y >= st.height)) {
    return err;
  }
  var xy = (y * w) + x;
  if (st.board[xy] || (!(x - st.x) && !(y - st.y))) {
    return err;
  }
  st.board[xy] = st.step = st.step + 1;

  var t = new Object;
  var pxy = new Array;
  t.pxy = pxy;
  var i = 0;
  var k = st.width * st.height;
  while (k > i) {
    pxy[i] = -1;
    i = i + 1;
  }

  var s = new Array;
  var si = 0;
  s[s.length] = st.x;
  s[s.length] = st.y;
  t.s = s;
  var xi;
  var xy0;
  while (s.length > si) {
    x = s[si];
    y = s[si + 1];
    si = si + 2;
    xy = (y * w) + x;
    xi = x + (y & 1);

    if (markNeighbor(xy, x - 1, y, t) ||
      markNeighbor(xy, xi, y - 1, t) ||
      markNeighbor(xy, xi - 1, y - 1, t) ||
      markNeighbor(xy, x + 1, y, t) ||
      markNeighbor(xy, xi, y + 1, t) ||
      markNeighbor(xy, xi - 1, y + 1, t)) {
      if (0 > pxy[xy]) {
        st.lost = 1;
        return '';
      }
      xy0 = xy;
      while (pxy[xy] >= 0) {
        xy0 = xy;
        xy = pxy[xy];
      }
      st.y = (xy0 / w) | 0;
      st.x = xy0 % w;
      st.pet[xy0] = 1;
      return '';
    }
  }
  st.win = 1;
  return '';
}

function stepString(typed) {
  var i = parseIntPlus(typed);
  if (isNaN(i)) {
    return 'Expecting an integer';
  }
  return stepNumber(i);
}

function step(index) {
  render(stepNumber(index));
}

function submitStep() {
  var msg = 'Failed to read coordinate';
  var s;
  if (window.f && window.f.t && ((s = window.f.t.value) || 1) && strEqual(typeof s, 'string')) {
    msg = stepString(s);
  }
  render(msg);
}

function restart() {
  generate();
  render('');
}

function init() {
  st.random = (new Date) % 2147483648;
  if (!st.random) {
    st.random = 1;
  }
  getRandomBits(128);

  st.inline = 1;
  st.width = 9;
  st.height = 9;
  st.barriers = (st.width + st.height) >> 1;
  restart();
}
</script
><a href='javascript:init()' class=a
>Start the game</a
><h2
>Requirements</h2
>You can install a web browser that supports at least JavaScript 1.0 (1995) to run this application or you may consider implementing a GemiWeb0 browser with JavaScript0 yourself according to the following specification:<p
><a target='_blank' rel=noopener href=https://bkil.gitlab.io/gemiweb0
>bkil.gitlab.io/gemiweb0</a
></body></html>
